const vs. let
--------------
- use const by default
- use let when rebinding / mutating is needed.
- same named let-vars in another scope are different variables!



arrow functions
----------------
- arriÃ´ws are always anonymous functions
- only on parameter, no bracket is needed
- implicit return (no {}, & 'return' word) on onliners:
    const fullNames3 = names.map(name => `${name} adamski`);
- arrow function inheritance 'this' from parent functions
- use regular functions if you want to refer this to a dom-node
- when NOT to use it:
    - if you really need THIS
    - when you neeed a method to miend to an object



default values:
----------------
- if undefined take the logical or || operator

function calculateBill(total, tax, tip){
    // if tip or tax is undefined take these values
    tax = tax || 0.13;
    return total + (total * tax) + (total * tip);
}

// new es6 way:
//you can pass 'undefined' and it will replaced by '0.13' value

function calculateBilles6(total, tax = 0.13, tip = 0.15) {
    return total + (total * tax) + (total * tip);
}


destructuring
--------------
 -why?
 - put a lot of objects in one vars
 - rename keys them as you destruct them {twitter:tweet}
 - add fallback keys values
 -  destruct the return value (only thes you want)
 - pass parameter as object and the order is irrelevant
